---
import ProfilePhoto from '@/components/ProfilePhoto.astro';

interface Props {
	description: string;
	title: string;
	lang: string;
}

const { description, title, lang } = Astro.props;
const { site } = Astro;
---

<!doctype html>
<html lang={lang}>
	<head>
		<script is:inline defer src="https://www.googletagmanager.com/gtag/js?id=G-7P2YRPSRK1"></script>
		<script>
			// @ts-nocheck
			window.dataLayer = window.dataLayer || [];
			function gtag(){dataLayer.push(arguments);}
			gtag('js', new Date());
			gtag('config', 'G-7P2YRPSRK1');
		</script>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="preload" as="image" imagesrcset="/fortal_city.webp">
		<link rel="preload" as="image" imagesrcset="/me.webp">
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="manifest" href="/site.webmanifest">
		<meta name="theme-color" content="#000">
		<meta name="apple-mobile-web-app-status-bar-style" content="#000">
		<meta name="msapplication-navbutton-color" content="#000">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta name="robots" content="index, follow">
		<meta name="googlebot" content="index, follow">
		<meta property="og:title" content=`${title}`>
		<meta property="og:description" content={description}>
		<meta property="og:url" content={`${site}${lang}`}>
		<meta property="og:site_name" content=`${title}`>
		<meta name="twitter:card" content="summary">
		<meta name="twitter:description" content={description}>
		<meta name="twitter:title" content=`${title}`>
		<meta property="og:image" content={`${site}me.webp`}>
		<meta property="og:type" content="website">
	</head>
	<body>
		<div id="hero-animation">
			<img class="background-image" src="/fortal_city.webp" alt=""/>
			<ProfilePhoto />
		</div>
		<slot />
	</body>
</html>
<style is:global>
	:root {
		--accent: 0, 142, 255;
		--accent-light: 0, 226, 255;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background: #000;
	}
	body {
		overflow-x: hidden;
	}
	#hero-animation {
		transform-style: preserve-3d;
    transition: all .1s;
	}
	.background-image {
		position: absolute;
		margin-left: auto;
		margin-right: auto;
		left: 0;
		right: 0;
		height: 408px;
		width: 99%;
		max-width: 1100px;
		object-fit: cover;
		pointer-events: none;
		border-radius: 3rem;
	}
	@media screen and (min-width: 1100px) {
		.background-image {
			filter: drop-shadow(0 0 2rem rgb(var(--accent)));
		}
	}
	@media screen and (max-width: 427px) {
		.background-image {
			height: 304px;
		}
	}
	button {
		background: black;
    color: white;
    border: 1px solid rgb(var(--accent));
    border-radius: .225rem;
    padding: 0.5rem 1rem;
    font-size: .875rem;
    cursor: pointer;
	}
	button:hover {
		color: rgb(var(--accent));
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.h2 {
		margin: 1rem 1rem 0;
    line-height: 1;
		font-size: 1.5rem;
	}
	.hide {
		display: none;
	}
</style>
<script>
	const heroAnimationContainer = document.getElementById("hero-animation");
	const profileImage = document.querySelector(".profile-image");
	if (screen.width >= 1100) {
		heroAnimationContainer?.addEventListener("mousemove", (ev) => {
			(profileImage as HTMLElement).style.transform = "translateZ(4rem)";
			const x = (window.innerWidth - 2 * ev.pageX) / 100;
			const y = (window.innerHeight - 2 * ev.pageY) / 100;
			(heroAnimationContainer as HTMLElement).style.transform = `perspective(1100px) rotateX(${y}deg) rotateY(${x}deg) scale3d(1, 1, 1)`;
		})
		heroAnimationContainer?.addEventListener("mouseout", () => {
			(profileImage as HTMLElement).style.transform = "translateZ(0)";
			(heroAnimationContainer as HTMLElement).style.transform = "perspective(1100px) scale(1) rotateX(0) rotateY(0)";
		})
	} else {
		const initDeviceOrientation = () => {
			if (window.DeviceOrientationEvent) {
				window.addEventListener("deviceorientation", (event) => {
					const { beta, gamma } = event;
					// @ts-ignore
					const x = gamma / 5; const y = beta / 5;
					(profileImage as HTMLElement).style.transform = "translateZ(4rem)";
					(heroAnimationContainer as HTMLElement).style.transform = `perspective(1100px) rotateX(${-y}deg) rotateY(${x}deg) scale3d(1, 1, 1)`;
				});
				window.addEventListener("devicemotion", (event) => {
					const acceleration = event.acceleration;
					// @ts-ignore
					if (Math.abs(acceleration.x) < 0.1 && Math.abs(acceleration.y) < 0.1) {
						(profileImage as HTMLElement).style.transform = "translateZ(0)";
						(heroAnimationContainer as HTMLElement).style.transform = "perspective(1100px) scale(1) rotateX(0) rotateY(0)";
					}
				});
			} else {
				console.warn("The device does not support the DeviceOrientation event.");
			}
		}
		heroAnimationContainer?.addEventListener("click", async () => {
			if (typeof (DeviceOrientationEvent as any).requestPermission === "function") {
				try {
					const permissionState = await (DeviceOrientationEvent as any).requestPermission();
					if (permissionState === "granted") {
						initDeviceOrientation();
					} else {
						const permissionDeniedAlert = {
							"/en/": "Permission to access the gyroscope has been denied.",
							"/pt/": "Permissão para acessar o giroscópio foi negada.",
							"/es/": "Se ha denegado el permiso para acceder al giroscopio."
						};
						alert(permissionDeniedAlert[window.location.pathname as "/en/" | "/pt/" | "/es/"]);
					}
				} catch (error) {
					console.error("Error requesting permission for DeviceOrientationEvent:", error);
				}
			} else {
				initDeviceOrientation();
			}
		})
	}
</script>
